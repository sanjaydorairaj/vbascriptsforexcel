Sub formatUserStories()     Application.DisplayAlerts = False        ' initialize last Tags Index to zero    Dim lastTagRow(1000) As Integer    For i = 1 To 1000        lastTagRow(i) = 1    Next        Dim maxRows, userStoryEndRow, userStoryStartRow, userStoryRowCount As Integer    Dim objRange As Range        Dim ActSheet As Worksheet    Set ActSheet = ActiveSheet    ActSheet.Select        Dim TagsSheet As Worksheet        maxRows = 1000        result = MsgBox("Confirm that last row has the string End in it", vbYesNo)    If result = vbNo Then        Exit Sub    End If        Dim columnToParse, outputWorksheet, oldElaborationColumn, newElaborationColumn, userStorySummaryColumn        columnToParse = InputBox("Enter the column to parse")    If columnToParse = "" Then            Exit Sub    End If        oldElaborationColumn = InputBox("Enter the old elaboration column to output data")    If oldElaborationColumn = "" Then            Exit Sub    End If        newElaborationColumn = InputBox("Enter the new elaboration column")    If newElaborationColumn = "" Then            Exit Sub    End If        outputWorksheet = InputBox("Enter the output worksheet for grouping user story elaboration")    If outputWorksheet = "" Then            Exit Sub    End If        userStorySummaryColumn = InputBox("Enter the column with user story summary")    If userStorySummaryColumn = "" Then            Exit Sub    End If         ' Process each user story     For i = 2 To maxRows        If ActSheet.Cells(i, 1) = "End" Then            Exit For        End If                If Not IsEmpty(ActSheet.Cells(i, 1)) Then                       ' We have a user story - lets format it               userStoryStartRow = i               For j = userStoryStartRow + 1 To maxRows                    If Not IsEmpty(ActSheet.Cells(j, 1)) Then                                                ' We have reached our next user story                        userStoryEndRow = j - 1                        userStoryRowCount = userStoryEndRow - userStoryStartRow + 1                                                'reset i so the loop continues with the next user story                         i = userStoryStartRow                                                ' Check if there is anything to merge, if not move to the next user story                        If userStoryRowCount = 1 Then                            Exit For                        End If                                                ' Ok, we have something to merge - let's merge                         CombineCells userStoryStartRow, userStoryEndRow, lastTagRow, oldElaborationColumn, newElaborationColumn, userStorySummaryColumn, columnToParse, outputWorksheet                        Exit For                                            End If               Next                       End If    Next        result = MsgBox("Do you want to delete the original Elaboration column", vbYesNo)    If result = vbNo Then        Exit Sub    End If    'Autosize rows and columns    Set objRange = ActSheet.UsedRange    objRange.EntireColumn.AutoFit    objRange.EntireRow.AutoFit        'Format output worksheet    Dim tagsRange As Range    Set TagsSheet = Worksheets(CInt(outputWorksheet))    Set tagsRange = TagsSheet.UsedRange    tagsRange.ColumnWidth = 100    tagsRange.EntireRow.AutoFit    TagsSheet.UsedRange.WrapText = True    tagsRange.Rows(1).Font.Bold = True        objRange.Columns(CInt(oldElaborationColumn)).Delete    End SubSub CombineCells(startRow, endRow, lastTagRow, oldElaborationColumn, newElaborationColumn, userStorySummaryColumn, columnToParse, outputWorksheet)    Dim finalValue As String    Dim first As Boolean    Dim cell As Excel.Range    Dim firstrow, firstcol, colcount, maxRows As Integer   Dim objRange As Range   Dim TagsSheet As Worksheet   Dim userStoryColumn As Integer    Dim tagColumn As Integer    Dim tagCellContents As String    Dim tagsList() As String        Dim ActSheet As Worksheet    Set ActSheet = ActiveSheet    ActSheet.Select    Dim SelRange As Range        first = True    maxRows = endRow - startRow + 1       ' Set the range of impacted cells   Set SelRange = Range(Cells(startRow, CInt(oldElaborationColumn)), Cells(endRow, CInt(oldElaborationColumn)))   SelRange.Select        For Each cell In SelRange.Cells        If first = True Then                first = False                finalValue = finalValue & CStr(cell.Value)        Else                finalValue = finalValue & vbCrLf & CStr(cell.Value)        End If    Next cell    ActSheet.Cells(startRow, CInt(newElaborationColumn)) = finalValue        ' Concatenate Cells    For colcount = 1 To 7        ActSheet.Range(Cells(startRow, colcount), Cells(startRow + maxRows - 1, colcount)).Merge    Next colcount        'Merge cells    For rowcount = startRow + 1 To startRow + maxRows - 1        ActSheet.Rows(startRow + 1).Delete x1ShiftUp    Next rowcount        'Classify by tag - parse tags into an array    tagCellContents = Replace(Cells(startRow, CInt(columnToParse)), " ", "")    tagsList = Split(tagCellContents, ",")        'populate tags worksheet with corresponding user story    Set TagsSheet = Worksheets(CInt(outputWorksheet))    For i = 0 To UBound(tagsList)        For j = 1 To TagsSheet.UsedRange.Columns.Count                    ' is there a tag match            If tagsList(i) = CStr(TagsSheet.Cells(1, j)) Then                lastTagRow(j) = lastTagRow(j) + 1                TagsSheet.Columns.Cells(lastTagRow(j), j) = ActSheet.Cells(startRow, CInt(newElaborationColumn))                Exit For            End If        Next j    Next i        End SubSub initializeTagWorksheet()    Dim tagsList() As String    Dim uniqueTagsList() As String    Dim tagsStr As String    Dim first As Boolean        Dim ActSheet As Worksheet    Dim outSheet As Worksheet    Dim SelRange As Range        Set ActSheet = ActiveSheet        Dim columnToParse As Integer    Dim outputWorksheet As Integer        columnToParse = InputBox("Enter the column to parse")    outputWorksheet = InputBox("Enter the output worksheet number")        ActSheet.Select    Set SelRange = ActSheet.UsedRange.Columns(columnToParse)        'create a comma separated list of all tags    first = True    For Each cell In SelRange.Cells        If first = True Then                first = False                tagsStr = tagsStr & Replace(CStr(cell.Value), " ", "")        Else                tagsStr = tagsStr & "," & Replace(CStr(cell.Value), " ", "")        End If    Next cell        'parse comma separated list of tags and add as column headers to new spreadsheet    tagsList = Split(tagsStr, ",")    uniqueTagsList = RemoveDups(tagsList)    uniqueTagsList = CleanUpArray(uniqueTagsList)        'set as column headers in new worksheet    Set outSheet = Worksheets(outputWorksheet)        For i = 1 To UBound(uniqueTagsList)        outSheet.Cells(1, i) = uniqueTagsList(i)    Next    End SubPublic Function RemoveDups(strings() As String) As String()Dim last_i As IntegerDim result() As StringDim matchFound As Boolean    ' Make the result array.    ReDim result(1 To UBound(strings))    ' Copy the first item into the result array.    result(1) = strings(1)    ' Copy the other items    last_i = 1    For i = 1 To UBound(strings)        matchFound = False        For j = 1 To UBound(result)              If strings(i) = result(j) Then                  matchFound = True                  Exit For              End If        Next j                If matchFound = False Then            last_i = last_i + 1            result(last_i) = strings(i)        End If    Next i    RemoveDups = resultEnd Function Function CleanUpArray(strings() As String) As String()   Dim i As Integer  Dim newCount As Integer    For i = 1 To UBound(strings)    If strings(i) = "" Then        For x = i To UBound(strings) - 1            strings(x) = strings(x + 1)        Next    End If  Next i    'Identify first empty string  For i = 1 To UBound(strings)    If strings(i) = "" Then          newCount = i          Exit For    End If  Next i    ' Make the result array.    ReDim Preserve strings(1 To newCount - 1)        CleanUpArray = strings    End Function